// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.20.3
// source: v1/database/database.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export interface Signal {
  id: number;
  signal: string;
  name: string;
  description: string;
  active: boolean;
}

export interface SignalList {
  signals: Signal[];
}

function createBaseSignal(): Signal {
  return { id: 0, signal: "", name: "", description: "", active: false };
}

export const Signal = {
  encode(message: Signal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.signal !== "") {
      writer.uint32(18).string(message.signal);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.active !== false) {
      writer.uint32(40).bool(message.active);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Signal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signal = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.active = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Signal {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      signal: isSet(object.signal) ? globalThis.String(object.signal) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: Signal): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.signal !== "") {
      obj.signal = message.signal;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create(base?: DeepPartial<Signal>): Signal {
    return Signal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Signal>): Signal {
    const message = createBaseSignal();
    message.id = object.id ?? 0;
    message.signal = object.signal ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseSignalList(): SignalList {
  return { signals: [] };
}

export const SignalList = {
  encode(message: SignalList, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.signals) {
      Signal.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignalList {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignalList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signals.push(Signal.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignalList {
    return {
      signals: globalThis.Array.isArray(object?.signals) ? object.signals.map((e: any) => Signal.fromJSON(e)) : [],
    };
  },

  toJSON(message: SignalList): unknown {
    const obj: any = {};
    if (message.signals?.length) {
      obj.signals = message.signals.map((e) => Signal.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SignalList>): SignalList {
    return SignalList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignalList>): SignalList {
    const message = createBaseSignalList();
    message.signals = object.signals?.map((e) => Signal.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
