// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.20.3
// source: v1/event/event.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal";

export interface SubscribeRequest {
  signalId: string;
}

export interface SignalEvent {
  signalId: string;
  eventType: string;
  eventData: string;
  createdAt: string;
}

export interface SubscribeResponse {
  signalId: string;
  eventType: string;
  eventData: string;
  createdAt: string;
}

function createBaseSubscribeRequest(): SubscribeRequest {
  return { signalId: "" };
}

export const SubscribeRequest = {
  encode(message: SubscribeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signalId !== "") {
      writer.uint32(10).string(message.signalId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signalId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeRequest {
    return { signalId: isSet(object.signalId) ? globalThis.String(object.signalId) : "" };
  },

  toJSON(message: SubscribeRequest): unknown {
    const obj: any = {};
    if (message.signalId !== "") {
      obj.signalId = message.signalId;
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeRequest>): SubscribeRequest {
    return SubscribeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeRequest>): SubscribeRequest {
    const message = createBaseSubscribeRequest();
    message.signalId = object.signalId ?? "";
    return message;
  },
};

function createBaseSignalEvent(): SignalEvent {
  return { signalId: "", eventType: "", eventData: "", createdAt: "" };
}

export const SignalEvent = {
  encode(message: SignalEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signalId !== "") {
      writer.uint32(10).string(message.signalId);
    }
    if (message.eventType !== "") {
      writer.uint32(18).string(message.eventType);
    }
    if (message.eventData !== "") {
      writer.uint32(26).string(message.eventData);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignalEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignalEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signalId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.eventData = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignalEvent {
    return {
      signalId: isSet(object.signalId) ? globalThis.String(object.signalId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      eventData: isSet(object.eventData) ? globalThis.String(object.eventData) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: SignalEvent): unknown {
    const obj: any = {};
    if (message.signalId !== "") {
      obj.signalId = message.signalId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.eventData !== "") {
      obj.eventData = message.eventData;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create(base?: DeepPartial<SignalEvent>): SignalEvent {
    return SignalEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignalEvent>): SignalEvent {
    const message = createBaseSignalEvent();
    message.signalId = object.signalId ?? "";
    message.eventType = object.eventType ?? "";
    message.eventData = object.eventData ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseSubscribeResponse(): SubscribeResponse {
  return { signalId: "", eventType: "", eventData: "", createdAt: "" };
}

export const SubscribeResponse = {
  encode(message: SubscribeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signalId !== "") {
      writer.uint32(10).string(message.signalId);
    }
    if (message.eventType !== "") {
      writer.uint32(18).string(message.eventType);
    }
    if (message.eventData !== "") {
      writer.uint32(26).string(message.eventData);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signalId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.eventData = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeResponse {
    return {
      signalId: isSet(object.signalId) ? globalThis.String(object.signalId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      eventData: isSet(object.eventData) ? globalThis.String(object.eventData) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: SubscribeResponse): unknown {
    const obj: any = {};
    if (message.signalId !== "") {
      obj.signalId = message.signalId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.eventData !== "") {
      obj.eventData = message.eventData;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeResponse>): SubscribeResponse {
    return SubscribeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeResponse>): SubscribeResponse {
    const message = createBaseSubscribeResponse();
    message.signalId = object.signalId ?? "";
    message.eventType = object.eventType ?? "";
    message.eventData = object.eventData ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

export interface EventServiceImplementation<CallContextExt = {}> {
  subscribe(
    request: SubscribeRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<SubscribeResponse>>;
}

export interface EventServiceClient<CallOptionsExt = {}> {
  subscribe(
    request: DeepPartial<SubscribeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<SubscribeResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };
